var s,e,next,c:array[2000] of integer;
     i,j,k,n,m,ans,num,temp:integer;
     v,w:array[300] of integer;
     f:array[300] of integer;
     hash:array[300] of integer;

function min(x,y:integer):integer;
begin
 if x>y then
  min:=y
 else
  min:=x;
end;

function find(x:integer):integer;
begin
 if f[x]=x then
  find:=x
 else 
 begin
  f[x]:=find(f[x]);
  find:=f[x];
 end
end;

procedure union(x,y:integer);
begin
 x:=find(x);
 y:=find(y);
 f[x]:=y;
end;

procedure connect(x,y,flow:integer);
begin
 num:=num+1;
 s[num]:=x;
 e[num]:=y;
 next[num]:=v[x];
 v[x]:=num;
 c[num]:=flow;
end;

procedure qsort(t,w:integer);
var i,j,mid,temp:integer;
begin
 if t < w then
 begin
 i:=t;
 j:=w;
 mid:=c[(t+w)/2];
 do
 begin
  if c[i]<mid then
  begin
   do 
    i:=i+1
   while c[i]<mid;
  end;
  if c[j]>mid then
  begin
   do
    j:=j-1
   while c[j]>mid;
  end;
  if i<=j then
   begin
    temp:=c[i];
    c[i]:=c[j];
    c[j]:=temp;
    temp:=s[i];
    s[i]:=s[j];
    s[j]:=temp;
    temp:=e[i];
    e[i]:=e[j];
    e[j]:=temp;
    i:=i+1;
    j:=j-1;
   end;
 end
 while i<=j;
 if i<w then
  qsort(i,w);
 if t<j then
  qsort(t,j);
 end;
end;

function kruskal:integer;
var i,ans,p,q,j:integer;
begin
 for i:=0 to n do
  f[i]:=i;
 ans:=0;
 qsort(1,num);
 p:=n;
 q:=1;
 if p > 0 then
 do
  begin
   i:=find(s[q]);
   j:=find(e[q]);
   if i<>j then
    begin
     ans:=ans+c[q];
     union(i,j);
     p:=p-1;
    end;
   q:=q+1;
  end
 while p > 0;
 kruskal:=ans;
end;

begin
 read(n);
 for i:=1 to n do
  begin
   read(j);
   w[i]:=j;
   connect(0,i,w[i]);
  end;
 for i:=1 to n do
  for j:=1 to n do
   begin
    read(k);
    if k>0 then
     connect(i,j,k);
  end;
 write(kruskal);
 read(w[i]);
end.

